#!/bin/bash

declare -A data
IFS=""
scriptname="$0"
#binary data
data["dotfiles"]="""
QlpoOTFBWSZTWQG7Fp0AA5r/////////////////////////////////////////////4BBfPu+z
XvV3c7b53nznNn3r766773a+977c6vvvfXN933fX32W+7e77g+p9vn3nt5l57O197XV13vt3yFPZ
AaTABTM1NTwU2aKe0U80mTUeRininqe0JmibUzUynoYTTQyTwTJqeaAFNPTExI8mBPQp4NCYJPJk
yehNNT9U9NqnsmQn6TInoZGIDTIFEKeTTE0aZTam0yejRTeRqaYGpkwk9omm0MkaYp7TSYjRtEwp
mFPNEwU8TTTIyZNlJ+moynggeI0GhlNgp6GpjSn6pvI0k/Uek1N6mEynpPI2kNkmCh1TZM0NT1Ga
nqbU0PSning0IT9SeaNNJNk9TRmlPNTKbGmp5Jk0PFMpvIp6aZPJPTE0JtNCZiMJkaCaTzIpsRiY
EyEwj0yTyeowUxpPKe1NDT1MgaZRCnp6ap4E1NtTT0A0U9PQhpiNoTRo9TZTBqmwp+BNGg0YhMyM
jRhU9CZlPyp5TZMFNPKb0JhMpmjSfojJ6T0JpknppkwaTU20m0jU81E9qY1NE9qZNModU9ppqnhP
VPJgnqaZTYE2ibJk0yaNFP9R6IxGmgU08JmQk9omUe01TZTJ7JTyMKfqnk2qGynpp6mkzyNIZJtM
p+im1B7TSMnop6aniaPU1GxPSNT02lPKfpM0FHqPUOqfpkwTTJiaaaMTSnqfkDVP1PRT1P0apmU9
DJtRon6iepmm00h6R6p7TUxJ7UB6k8U2Jk0xT9Kaeifqnk9CT9Gp6T1D1Tyaj9U9TxBqP0apm1PR
RvESeCm8VN6k9B6ptT1P1NqnogB6ABobEE178GpwlnywbCNkwTkDK8qfWLs/tIHBa4tIegknXRwM
mT/XnSilIIjDPGiRWDkwwZLSHBFDevk3Pno699sJ2pI7EjCkNz+RndL2GAiIRD47m5jcQ98gXCeC
aEYXhYcSV5NmQytBKwPi0VgOQClyXMbeMhpqMLCjVvpvNGk0evbdX34sAJUsbx3hxCg2FH17ENRq
KNzw7C9iFmfjJeezqPUKtdFH+wOjA3+L1zh7xRXKw2u4f3S7hPbHUHIkI3bkfW2KJpytPXDf7Kd5
UjtoAq72cm1eaoieS4jmFai24sMD40ivmpvo0lfuOQ4Du+/6TzYA0t45xXaUTzMYZKie/ZlGRVqX
BvaRPyyDrNBwY2bi5GxIQUh6xvqzmgfH3CeoOyiuHg3x1ULz4FOWSM16Ufsli4PpcyUxbkdp5qCK
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
"""

function embed
{
tmpself=`tempfile`
tmpselfembedded=`tempfile`
sed -e '/^data\[\"'$1'\"\]=\"\"\"$/,/^\"\"\"/d' < "$0" > "$tmpself"
sed -e '1,/^#binary\sdata/!d' < "$tmpself" > "$tmpselfembedded"
echo 'data["'$1'"]="""' >> "$tmpselfembedded"
cat "$2" | bzip2 -9 | base64 >> "$tmpselfembedded"
echo '"""' >> "$tmpselfembedded"
sed -e '1,/^#binary\sdata/d' < "$tmpself" >> "$tmpselfembedded"

mv "$tmpselfembedded" "$0"
chmod u+x "$0"
rm $tmpself
}
function backup
{
IFS=$'\n'
curpwd=`pwd`
tmpfile=`tempfile`

cd ~/
tar cvjf "$tmpfile" --files-from ~/.dotsave --ignore-failed-read
cd "$curpwd"
embed "dotfiles" "$tmpfile"
rm "$tmpfile"
}
function save
{
    if [ -n "$1" ]
    then
        grep -P "^data\[\"dotfiles\"\]=\"\"\"$" -q < "$0"
        if [ $? -eq 0 ]
        then
            echo ${data["dotfiles"]} | base64 -d | bzip2 -d > "$1"
        else
            echo "There is no data \"$1\""
        fi
    else
        echo "Please specify output file"
    fi
}
function restore
{
tmpfile=`tempfile`
save "$tmpfile"
cd /tmp/a
tar xvjf "$tmpfile"
rm "$tmpfile"

}
case "$1" in
    "backup")
    echo "backuping data..."
    backup
    ;;
    "restore")
    echo "restoring data..."
    restore
    ;;
    "save")
    save "$2"
    ;;
    "list")
    echo -n "datas: "
        for p in ${!data[@]}
        do
            echo -n "$p "
        done
        echo
    ;;
    *)
    echo "usage: $0 backup|restore|save|list"
    ;;
esac

