#!/bin/bash

declare -A data
IFS=""
scriptname="$0"
#binary data
data["dotfiles"]="""
QlpoOTFBWSZTWYl5s7wAA4b/////////////////////////////////////////////4A/fPvld
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
EvNneA==
"""

function embed
{
tmpself=`tempfile`
tmpselfembedded=`tempfile`
sed -e '/^data\[\"'$1'\"\]=\"\"\"$/,/^\"\"\"/d' < "$0" > "$tmpself"
sed -e '1,/^#binary\sdata/!d' < "$tmpself" > "$tmpselfembedded"
echo 'data["'$1'"]="""' >> "$tmpselfembedded"
cat "$2" | bzip2 -9 | base64 >> "$tmpselfembedded"
echo '"""' >> "$tmpselfembedded"
sed -e '1,/^#binary\sdata/d' < "$tmpself" >> "$tmpselfembedded"

mv "$tmpselfembedded" "$0"
chmod u+x "$0"
rm $tmpself
}
function backup
{
IFS=$'\n'
curpwd=`pwd`
tmpfile=`tempfile`

cd ~/
tar cvjf "$tmpfile" --files-from ~/.dotsave --ignore-failed-read
cd "$curpwd"
embed "dotfiles" "$tmpfile"
rm "$tmpfile"
}
function save
{
    if [ -n "$1" ]
    then
        grep -P "^data\[\"dotfiles\"\]=\"\"\"$" -q < "$0"
        if [ $? -eq 0 ]
        then
            echo ${data["dotfiles"]} | base64 -d | bzip2 -d > "$1"
        else
            echo "There is no data \"$1\""
        fi
    else
        echo "Please specify output file"
    fi
}
function restore
{
tmpfile=`tempfile`
save "$tmpfile"
cd ~
tar xvjf "$tmpfile"
rm "$tmpfile"

}
case "$1" in
    "backup")
    echo "backuping data..."
    backup
    ;;
    "restore")
    echo "restoring data..."
    restore
    ;;
    "save")
    save "$2"
    ;;
    "list")
    echo -n "datas: "
        for p in ${!data[@]}
        do
            echo -n "$p "
        done
        echo
    ;;
    *)
    echo "usage: $0 backup|restore|save|list"
    ;;
esac

